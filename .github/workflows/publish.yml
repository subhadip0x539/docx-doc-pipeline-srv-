name: Publish

permissions: write-all

on:
  push:
    branches:
      - development

jobs:
  tag:
    runs-on: ubuntu-latest

    outputs:
      build: ${{ steps.createtag.outputs.build }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Calculate Version
        id: version
        run: |
          VERSION=$(bash ./.github/scripts/calculate-version.sh)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Tag
        id: createtag
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: git tag ${{ steps.version.outputs.VERSION }} && git push origin ${{ steps.version.outputs.VERSION }} &&  echo "build=true" >> $GITHUB_OUTPUT || echo "build=false" >> $GITHUB_OUTPUT
  build:
    runs-on: ubuntu-latest
    needs:
      - tag
    if: ${{ always() && !cancelled() && needs.tag.result == 'success' && needs.tag.outputs.build == 'true' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get tag
        id: tag
        run: |
          TAG=$(git describe --tags --abbrev=0)
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/docx-doc-pipeline-srv:${{ steps.tag.outputs.TAG }} , ${{ secrets.DOCKERHUB_USERNAME }}/docx-doc-pipeline-srv:latest
